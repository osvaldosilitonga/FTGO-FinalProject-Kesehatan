basePath: /api/v1
definitions:
  product.UpdateProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
    type: object
  web.CreateOrderProductRequest:
    properties:
      products:
        items:
          $ref: '#/definitions/web.ProductDatas'
        type: array
    required:
    - products
    type: object
  web.CreateOrderResponseData:
    properties:
      amount:
        type: integer
      created:
        type: string
      description:
        type: string
      expairy_date:
        type: string
      external_id:
        type: string
      invoice_id:
        type: string
      invoice_url:
        type: string
      payment_email:
        type: string
      status:
        type: string
    type: object
  web.CreateProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        minimum: 1000
        type: integer
      stock:
        minimum: 1
        type: integer
    required:
    - category
    - description
    - name
    - price
    - stock
    type: object
  web.ErrWebResponse:
    properties:
      code:
        type: integer
      detail: {}
      status:
        type: string
    type: object
  web.ProductDatas:
    properties:
      id:
        type: string
      qty:
        minimum: 1
        type: integer
    required:
    - id
    - qty
    type: object
  web.SwCancelOrder:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.CreateOrderResponseData'
      status:
        type: string
    type: object
  web.SwCreateOrder:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.CreateOrderResponseData'
      status:
        type: string
    type: object
  web.SwOrderConfirm:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.CreateOrderResponseData'
      status:
        type: string
    type: object
  web.SwOrderDetail:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.CreateOrderResponseData'
      status:
        type: string
    type: object
  web.SwOrderFindByID:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.SwOrderFindByIDData'
      status:
        type: string
    type: object
  web.SwOrderFindByIDData:
    properties:
      created_at:
        type: string
      order_id:
        type: string
      products:
        items:
          $ref: '#/definitions/web.SwOrderFindByIDProduct'
        type: array
      status:
        type: string
      total_amount:
        type: integer
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  web.SwOrderFindByIDProduct:
    properties:
      id:
        type: string
      qty:
        type: integer
    type: object
  web.SwPaymentByUserID:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/web.SwPaymentInvoiceData'
        type: array
      status:
        type: string
    type: object
  web.SwPaymentInvoice:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.SwPaymentInvoiceData'
      status:
        type: string
    type: object
  web.SwPaymentInvoiceData:
    properties:
      amount:
        type: integer
      created_at:
        type: string
      currency:
        type: string
      description:
        type: string
      email:
        type: string
      id:
        type: string
      invoice_id:
        type: string
      merchant_name:
        type: string
      order_id:
        type: string
      payment_method:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  web.SwProduct:
    properties:
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  web.SwProductCreate:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.SwProductCreateData'
      status:
        type: string
    type: object
  web.SwProductCreateData:
    properties:
      category:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
      updatedAt:
        type: string
    type: object
  web.SwProductDelete:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.SwProductDeleteData'
      status:
        type: string
    type: object
  web.SwProductDeleteData:
    properties:
      category:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
      updatedAt:
        type: string
    type: object
  web.SwProductFindById:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.SwProductFindByIdData'
      status:
        type: string
    type: object
  web.SwProductFindByIdData:
    properties:
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  web.SwProductList:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.SwProductListData'
      status:
        type: string
    type: object
  web.SwProductListData:
    properties:
      products:
        items:
          $ref: '#/definitions/web.SwProduct'
        type: array
    type: object
  web.SwProductUpdate:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.SwProductUpdateData'
      status:
        type: string
    type: object
  web.SwProductUpdateData:
    properties:
      category:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
      updatedAt:
        type: string
    type: object
  web.SwUserLogin:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.SwUserLoginData'
      status:
        type: string
    type: object
  web.SwUserLoginData:
    properties:
      token:
        type: string
    type: object
  web.SwUserProfile:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.SwUserProfileData'
      status:
        type: string
    type: object
  web.SwUserProfileData:
    properties:
      address:
        type: string
      birth_date:
        type: string
      email:
        type: string
      gender:
        type: string
      name:
        type: string
      phone:
        type: string
      user_id:
        type: integer
    type: object
  web.SwUserProfileDataUpdate:
    properties:
      user_profile:
        type: string
    type: object
  web.SwUserProfileUpdate:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.SwUserProfileDataUpdate'
      status:
        type: string
    type: object
  web.SwUserRegister:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/web.SwUserRegisterData'
      status:
        type: string
    type: object
  web.SwUserRegisterData:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  web.UsersLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  web.UsersRegisterRequest:
    properties:
      address:
        type: string
      birthdate:
        type: string
      email:
        type: string
      gender:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
    required:
    - address
    - birthdate
    - email
    - gender
    - name
    - password
    - phone
    type: object
  web.UsersUpdateProfileRequest:
    properties:
      address:
        type: string
      birthdate:
        type: string
      gender:
        type: string
      phone:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: wellnesslink.ot@gmail.com
    name: WellnessLink
    url: www.welnesslink.com
  description: The Health and Pharmaceutical Sales API provides an integrated solution
    for health and drug sales business systems.
  license:
    name: Apache 2.0
  title: WellnessLink by Cap-OT - API Documentation
  version: BETA
paths:
  /order:
    post:
      consumes:
      - application/json
      description: Create a new order for customer. Need to login first
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order details
        in: body
        name: createOrder
        required: true
        schema:
          $ref: '#/definitions/web.CreateOrderProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.SwCreateOrder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Create order (Customer Only)
      tags:
      - Order
  /order/{id}:
    get:
      consumes:
      - application/json
      description: Get order detail by id. Need to login first
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwOrderDetail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Order Detail (Customer and Admin)
      tags:
      - Order
  /order/admin:
    get:
      consumes:
      - application/json
      description: List of all customer orders
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwOrderDetail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: List all order (Admin Only)
      tags:
      - Order
  /order/admin/confirm/{id}:
    put:
      consumes:
      - application/json
      description: Confirm the order to be completed.
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwOrderConfirm'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Confirm Order (Admin Only)
      tags:
      - Order
  /order/cancel/{id}:
    post:
      consumes:
      - application/json
      description: Canceling customer order. Need to login first
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwCancelOrder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Cancel order (Customer Only)
      tags:
      - Order
  /order/user/{id}:
    get:
      consumes:
      - application/json
      description: Find order by user id
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwOrderFindByID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Find Order by User ID (User)
      tags:
      - Order
  /payment/{id}:
    get:
      consumes:
      - application/json
      description: Get Payment by Invoice ID
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwPaymentInvoice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Get Payment by Invoice ID (Owner, Admin)
      tags:
      - Payment
  /payment/order/{id}:
    get:
      consumes:
      - application/json
      description: Get Payment by Order ID
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwPaymentInvoice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Get Payment by Order ID (Owner, Admin)
      tags:
      - Payment
  /payment/user/{id}:
    get:
      consumes:
      - application/json
      description: Get Payment by User ID
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Owner ID
        in: path
        name: id
        required: true
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      - description: status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwPaymentByUserID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Get Payment by User ID (Owner, Admin)
      tags:
      - Payment
  /products:
    get:
      consumes:
      - application/json
      description: List Product
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwProductList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: List Product
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Create new product
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/web.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.SwProductCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Create Product (Admin Only)
      tags:
      - Product
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete product by ID
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwProductDelete'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Delete Product (Admin Only)
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwProductFindById'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Product Detail
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Update product by ID
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/product.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwProductUpdate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Update Product (Admin Only)
      tags:
      - Product
  /user/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: User Credentials
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/web.UsersLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwUserLogin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Login
      tags:
      - User
  /user/profile/{id}:
    get:
      consumes:
      - application/json
      description: Get user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwUserProfile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Get User Profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user profile
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/web.UsersUpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SwUserProfileUpdate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Update Profile (Owner Only)
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/json
      description: Register new user
      parameters:
      - description: User Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/web.UsersRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.SwUserRegister'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Register
      tags:
      - User
  /user/register/admin:
    post:
      consumes:
      - application/json
      description: Register for admin
      parameters:
      - description: Admin Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/web.UsersRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.SwUserRegister'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrWebResponse'
      summary: Register Admin
      tags:
      - User
swagger: "2.0"
